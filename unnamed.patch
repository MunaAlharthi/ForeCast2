Index: BackgroundClass.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- BackgroundClass.kt	(revision )
+++ BackgroundClass.kt	(revision )
@@ -0,0 +1,87 @@
+package com.test.forecast
+
+import android.content.Context
+import android.os.AsyncTask
+import android.util.Log
+import java.io.BufferedReader
+import java.io.BufferedWriter
+import java.io.IOException
+import java.io.InputStream
+import java.io.InputStreamReader
+import java.io.OutputStream
+import java.io.OutputStreamWriter
+import java.net.HttpURLConnection
+import java.net.MalformedURLException
+import java.net.URL
+
+class BackgroundClass(private val context: Context) : AsyncTask<String, Void, String>() {
+    internal var type: String? = null
+
+    override fun doInBackground(vararg voids: String): String? {
+
+
+        try {
+
+
+            val url = URL(voids[0])
+
+            val httpURLConnection = url.openConnection() as HttpURLConnection
+            httpURLConnection.requestMethod = "GET"
+            httpURLConnection.doOutput = true
+            httpURLConnection.doInput = true
+
+            val outputStream = httpURLConnection.outputStream
+
+            val bufferedWriter = BufferedWriter(OutputStreamWriter(outputStream, "UTF-8"))
+
+            val postData = ""
+
+            bufferedWriter.write(postData)
+            bufferedWriter.flush()
+            bufferedWriter.close()
+
+            outputStream.close()
+
+            val inputStream = httpURLConnection.inputStream
+
+            val bufferedReader = BufferedReader(InputStreamReader(inputStream, "iso-8859-1"))
+
+            var result = ""
+            var line: String
+
+            while (( bufferedReader.readLine()) != null) {
+                line = bufferedReader.readLine()
+                result += line
+            }
+
+            bufferedReader.close()
+            inputStream.close()
+            httpURLConnection.disconnect()
+
+            return result
+        } catch (e: MalformedURLException) {
+            e.printStackTrace()
+        } catch (e: IOException) {
+            e.printStackTrace()
+        }
+
+
+
+        return null
+    }
+
+    override fun onPreExecute() {
+        Log.d("resss", "started")
+
+    }
+
+    override fun onPostExecute(aVoid: String?) {
+        if (aVoid != null)
+            Log.d("resss", aVoid)
+
+    }
+
+    override fun onProgressUpdate(vararg values: Void) {
+        super.onProgressUpdate(*values)
+    }
+}
